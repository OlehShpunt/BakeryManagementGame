class_name TradeableComponent extends Node2D


# Assigned by the algorithms
## Primarily used for passing the shop_items down here from the seller
## this var is not used by any algorithms directly, instead - indirectly via Seller,
## who has his own shop_items variable
var shop_items: Array


@onready var dollar = $DollarSign
@onready var seller_gui = $DollarSign/SellerGUI
@onready var interactable_zone = $InteractableZone
var seller_gui_item_data : PackedScene = preload("res://scenes/gui/seller_gui_item_data.tscn")


var num_players_in_interactable_zone = 0
var mouse_is_hovering_dollar = false
# Basically the "shown" vars are not really needed in the if statements below (it's just for security).
# Those will be accessed by other scripts.
# IDK WHETHER I NEED THE if CHECKS using these 
# variables - MAYBE show() WON"T RAISE ERROR WHEN THE GUI IS ALREADY SHOWN - dunno :/
var dollar_shown = false # IGNORE AS A SEMANTIC IN IF STATEMENTS OF THIS SCRIPT
var seller_gui_shown = false # IGNORE AS A SEMANTIC IN IF STATEMENTS OF THIS SCRIPT

# !!! 
# THIS IS TEMP FUNCTIONALITY - PLAYER MUST BE ASSIGNED TEMPORARILY 
# DURING PURCHASE, BUT IT CAN BE DONE WHEN I WILL HAVE MULTIPLAYER IMPLEMENTED
var PLAYER : Player

func _ready() -> void:
	
	get_parent().shop_items_updated.connect(on_shop_items_updated)
	
	# Get the item list from the seller npc
	# Seller npc gets the list from the algoritms
	self.shop_items = get_parent().shop_items
	
	dollar.hide()
	seller_gui.hide()
	
	# Moved this to the Seller itself
	## Add items to gui
	#initialize_seller_gui()

## Add specified items in shop_items
func initialize_seller_gui():
	
	# Used for assigning seller_gui_item_data ID
	var count = 0
	
	# Each "item" is a string that holds coma-separated item data 
	# (its algorithm-generated name and price)
	for item: String in get_parent().get_shop_items():
		
		var shop_item: SellerGUIItemData = seller_gui_item_data.instantiate()
		
		var i_data = item.split(",")
		
		shop_item.ID = count
		count += 1
		
		# i_data: 0 = name, 1 = price
		# setting item name
		shop_item.item_scene_path = i_data[0]
		# setting item price
		shop_item.price = i_data[1]
		
		if i_data.size() > 2:
			if i_data[2].strip_edges() == "true":
				shop_item.sold_out = true
			elif i_data[2].strip_edges() == "false":
				shop_item.sold_out = false
			else:
				push_warning("Parse error: Could not match value at i_data[2] with \"true\" or \"false\", so false is chosen by default")
				shop_item.sold_out = false
		else:
			push_warning("Parse error: Could not find true ot false at the end of shop item string, so false is chosen by default")
			shop_item.sold_out = false
		
		##TO-DO: Set shop_item.price to the item price that I want to display - generated by the algorithm
		seller_gui.inside_container.add_child(shop_item)


## Called when shop_items_updated signal is emmited in the Seller
## when Seller's shop_items is updated with new item list from seller_item_list_generator
func on_shop_items_updated():
	
	print("this is updated????WHY")
	
	# Making sure the previous shop items are removed
	var children = seller_gui.inside_container.get_children()
	for child in children:
		child.queue_free()
	
	# Create new items in the Seller GUI
	initialize_seller_gui()


# When player enters the tradeable zone, trade (dollar) is enabled
func _on_interactable_zone_body_entered(body: Node2D) -> void:
	if body.has_method("player") and GameOrchestrator.current_phase == GameOrchestrator.BUYING_PHASE:
		
		# TODO !!! 
		# TEMPORARY - NEEDS REPLACEMENT AS SOON AS MULTIPLAYER IS IMPLEMENTED (see comments above)
		PLAYER = body
		
		# Block player's inventory to prevent him from accidentally moving their items while shopping (using seller_gui)
		body.block_inventory()
		
		num_players_in_interactable_zone += 1
		
		if (!dollar_shown): # Exception (lol what), there's where it's needed
			dollar_shown = true
			dollar.show()

# When all players exit the tradeable zone, trade (dollar) is disabled
func _on_interactable_zone_body_exited(body: Node2D) -> void:
	if body.has_method("player"):
		
		# !!! 
		# TEMPORARY - NEEDS REPLACEMENT AS SOON AS MULTIPLAYER IS IMPLEMENTED (see comments above)
		PLAYER = null
		
		# Unblock player's inventory because it got blocked when he entered the interactable area
		body.unblock_inventory()
		
		num_players_in_interactable_zone -= 1
		if (dollar_shown and num_players_in_interactable_zone <= 0):
			dollar_shown = false
			dollar.hide()
			if (seller_gui_shown):
				seller_gui_shown = false
				seller_gui.hide()

# Allows opening the seller gui hovering over dollar
func _on_click_to_trade_mouse_entered() -> void:
	mouse_is_hovering_dollar = true
	#print("mouse entered dollar")

# Prevents the seller gui from opening when not hovering over dollar
func _on_click_to_trade_mouse_exited() -> void:
	mouse_is_hovering_dollar = false
	#print("mouse exited dollar")

# Open/Close seller GUI here
func _input(event: InputEvent) -> void:
	if event.is_action_pressed("left_click") and mouse_is_hovering_dollar:
		if not seller_gui_shown:
			seller_gui_shown = true
			seller_gui.show()
		else:
			# Prevent other players to close gui when another user is potentially using the gui
			# Otherwise, other could just spam close the 
			# seller GUI to prevent another player(s) from buying items
			if (num_players_in_interactable_zone == 1):
				seller_gui_shown = false
				seller_gui.hide()
